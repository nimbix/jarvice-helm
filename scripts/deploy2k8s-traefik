#!/bin/bash

version_tag=
load_balancer_ip=
load_balancer_external_ip=
node_port=
replicas=3
memory_request=1Gi
memory_limit=1Gi
cpu_request=1
cpu_limit=1
namespace=kube-system

function usage {
    cat <<EOF
Usage:
    $0 [options]

Options:
    --load-balancer-ip <ip_addr>    Static IP for ingress controller service*
    --node-port <node_port>         NodePort for ingress controller service*
                                    (Valid port range: 30000-32767)
    -load-balancer-external-ip      External IP for ingress controller service*
    --replicas <replicas>           Number of pod replicas to run
                                    (Default: $replicas)
    --memory-request <memory>       Memory request for each pod
                                    (Default: $memory_request)
    --memory-limit <memory>         Memory limit for each pod
                                    (Default: $memory_limit)
    --cpu-request <cpu>             CPU request for each pod
                                    (Default: $cpu_request)
    --cpu-limit <cpu>               CPU limit for each pod
                                    (Default: $cpu_limit)
    --namespace <kube_namespace>    Kubernetes namespace to deploy to
                                    (Default: $namespace)
    --version-tag <tag>             Traefik version
                                    (Default: $version_tag)

* One of --load-balancer-ip, --load-balancer-external-ip, or --node-port is required

Example deployment using LoadBalancer service:
    $0 --load-balancer-ip 10.20.0.10

Example deployment using NodePort service:
    $0 --node-port 30443
EOF
}

HELM=$(type -p helm)
if [ -z "$HELM" ]; then
    cat <<EOF
Could not find 'helm' in PATH.  It may not be installed.
Run 'install-helm' from the 'jarvice-helm/scripts' directory to install it.
EOF
    exit 1
fi

KUBECTL=$(type -p kubectl)
if [ -z "$KUBECTL" ]; then
    cat <<EOF
Could not find 'kubectl' in PATH.  It may not be installed.
Run 'install-kubectl' from the 'jarvice-helm/scripts' directory to install it.
EOF
    exit 1
fi

while [ $# -gt 0 ]; do
    case $1 in
        --help)
            usage
            exit 0
            ;;
        --load-balancer-ip)
            load_balancer_ip=$2
            shift; shift
            ;;
	--load-balancer-external-ip)
            load_balancer_external_ip=$2
	    shift; shift
	    ;;
        --node-port)
            node_port=$2
            shift; shift
            ;;
        --replicas)
            replicas=$2
            shift; shift
            ;;
        --memory-request)
            memory_request=$2
            shift; shift
            ;;
        --memory-limit)
            memory_limit=$2
            shift; shift
            ;;
        --cpu-request)
            cpu_request=$2
            shift; shift
            ;;
        --cpu-limit)
            cpu_limit=$2
            shift; shift
            ;;
        --namespace)
            namespace=$2
            shift; shift
            ;;
        --version-tag)
            version_tag=$2
            shift; shift
            ;;
        *)
            usage
            exit 1
            ;;
    esac
done

[ -z "$load_balancer_ip" -a -z "$node_port" -a -z "$load_balancer_external_ip" ] && usage && exit 1
[ -n "$load_balancer_ip" -a -n "$node_port" -a -n "$load_balancer_external_ip" ] && usage && exit 1

set -e

echo
echo "* Creating namespace: $namespace"
$KUBECTL create namespace $namespace 2>/dev/null || /bin/true

echo
if [ -n "$node_port" ]; then
    ip_args="--set service.type=NodePort --set ports.traefik.expose=true --set ports.traefik.nodePort=$node_port"
elif [ -n "$load_balancer_external_ip" ]; then
    ip_args="--set service.type=LoadBalancer --set service.spec.externalIPs[0]=$load_balancer_external_ip"
else
    ip_args="--set service.type=LoadBalancer --set service.spec.loadBalancerIP=$load_balancer_ip"
fi
repo=https://helm.traefik.io/traefik
$HELM upgrade traefik traefik --repo $repo \
    --namespace $namespace --install --reset-values \
    \
    --set image.tag="$version_tag" \
    \
    --set affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms[0].matchExpressions[0].key="node-role\.jarvice\.io/jarvice-system" \
    --set affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms[0].matchExpressions[0].operator="Exists" \
    \
    --set affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms[0].matchExpressions[1].key="kubernetes\.io/arch" \
    --set affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms[0].matchExpressions[1].operator="In" \
    --set affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms[0].matchExpressions[1].values[0]="amd64" \
    --set affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms[0].matchExpressions[1].values[1]="arm64" \
    \
    --set affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms[1].matchExpressions[0].key="node-role\.kubernetes\.io/jarvice-system" \
    --set affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms[1].matchExpressions[0].operator="Exists" \
    \
    --set affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms[1].matchExpressions[1].key="kubernetes\.io/arch" \
    --set affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms[1].matchExpressions[1].operator="In" \
    --set affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms[1].matchExpressions[1].values[0]="amd64" \
    --set affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms[1].matchExpressions[1].values[1]="arm64" \
    \
    --set tolerations[0]."key"="node-role\.jarvice\.io/jarvice-system" \
    --set tolerations[0]."effect"="NoSchedule" \
    --set tolerations[0]."operator"="Exists" \
    \
    --set tolerations[1]."key"="node-role\.kubernetes\.io/jarvice-system" \
    --set tolerations[1]."effect"="NoSchedule" \
    --set tolerations[1]."operator"="Exists" \
    \
    $ip_args \
    \
    --set ingressClass.enabled=true \
    --set ingressRoute.dashboard.enabled=false \
    \
    --set ports.web.redirectTo="websecure" \
    --set ports.websecure.tls.enabled=true \
    --set "additionalArguments={--serverstransport.insecureskipverify=true}" \
    \
    --set deployment.replicas=$replicas \
    --set resources.requests.memory=$memory_request \
    --set resources.limits.memory=$memory_limit \
    --set resources.requests.cpu=$cpu_request \
    --set resources.limits.cpu=$cpu_limit

echo
echo "* Deployment successful..."

echo
echo "For advanced setup details, visit https://traefik.io/ and/or execute:"
echo "$ helm inspect all traefik --repo $repo"

