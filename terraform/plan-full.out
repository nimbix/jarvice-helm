[0m[1mlocal_file.clusters: Refreshing state... [id=beb8a4a81aeaf31d5651dbb028f9a8f5478cfabb][0m

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  [32m+[0m create[0m

Terraform will perform the following actions:

[1m  # local_file.clusters[0m will be created
[0m  [32m+[0m[0m resource "local_file" "clusters" {
      [32m+[0m[0m content              = <<-EOT
            # clusters.tf - cluster definitions (dynamically created using cluster configs)
            
            ################
            # K8s clusters #
            ################
            
            
            
            ################
            # GKE clusters #
            ################
            
            
            
            ###################
            # GKE clusters v2 #
            ###################
            
            
            
            #################
            # CAPG clusters #
            #################
            
            # CAPG cluster configuration: capg_cluster_00
            provider "google" {
                alias = "capg_cluster_00"
            
                region = local.capg["capg_cluster_00"].location["region"]
                project = local.capg["capg_cluster_00"].auth["project"]
                credentials = local.capg["capg_cluster_00"].auth["service_account_key_file"]
            }
            
            provider "kubernetes" {
                alias = "capg_cluster_00"
            
                host = module.capg_cluster_00.kube_config["host"]
                cluster_ca_certificate = base64decode(module.capg_cluster_00.kube_config["cluster_ca_certificate"])
                client_certificate = base64decode(module.capg_cluster_00.kube_config["client_certificate"])
                client_key = base64decode(module.capg_cluster_00.kube_config["client_key"])
                token = module.capg_cluster_00.kube_config["token"]
            }
            
            provider "helm" {
                alias = "capg_cluster_00"
            
                kubernetes {
                    host = module.capg_cluster_00.kube_config["host"]
                    cluster_ca_certificate = base64decode(module.capg_cluster_00.kube_config["cluster_ca_certificate"])
                    client_certificate = base64decode(module.capg_cluster_00.kube_config["client_certificate"])
                    client_key = base64decode(module.capg_cluster_00.kube_config["client_key"])
                    token = module.capg_cluster_00.kube_config["token"]
                }
            }
            
            
            
            # CAPG cluster configuration: capg_cluster_00
            module "capg_cluster_00" {
                source = "./modules/capg"
            
                enabled = local.capg["capg_cluster_00"].enabled
                auth = local.capg["capg_cluster_00"].auth
                meta = local.capg["capg_cluster_00"].meta
                location = local.capg["capg_cluster_00"].location
                system_node_pool = local.capg["capg_cluster_00"].system_node_pool
                dockerbuild_node_pool = local.capg["capg_cluster_00"].dockerbuild_node_pool
                compute_node_pools = local.capg["capg_cluster_00"].compute_node_pools
                cluster = local.capg["capg_cluster_00"].cluster
                helm = local.capg["capg_cluster_00"].helm
                global = var.global
            
                providers = {
                    google = google.capg_cluster_00
                    kubernetes = kubernetes.capg_cluster_00
                    helm = helm.capg_cluster_00
                }
                depends_on = [local_file.clusters]
            }
            
            output "capg_cluster_00" {
                value = format("\n\nCAPG Cluster Configuration: %s\n%s\n", "capg_cluster_00", module.capg_cluster_00.cluster_info)
            }
            output "capg_cluster_00_slurm" {
                value = module.capg_cluster_00.slurm_info
            }
            
            ################
            # EKS clusters #
            ################
            
            
            
            ###################
            # EKS clusters v2 #
            ###################
            
            
            
            ################
            # AKS clusters #
            ################
        EOT
      [32m+[0m[0m content_base64sha256 = (known after apply)
      [32m+[0m[0m content_base64sha512 = (known after apply)
      [32m+[0m[0m content_md5          = (known after apply)
      [32m+[0m[0m content_sha1         = (known after apply)
      [32m+[0m[0m content_sha256       = (known after apply)
      [32m+[0m[0m content_sha512       = (known after apply)
      [32m+[0m[0m directory_permission = "0775"
      [32m+[0m[0m file_permission      = "0664"
      [32m+[0m[0m filename             = "./clusters.tf"
      [32m+[0m[0m id                   = (known after apply)
    }

[1mPlan:[0m 1 to add, 0 to change, 0 to destroy.
[0m[90m
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€[0m

Note: You didn't use the -out option to save this plan, so Terraform can't
guarantee to take exactly these actions if you run "terraform apply" now.
